// Package petstore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package petstore

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Pet defines model for Pet.
type Pet struct {
	Id   int64   `json:"id"`
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// Pets defines model for Pets.
type Pets = []Pet

// ListPetsParams defines parameters for ListPets.
type ListPetsParams struct {
	// Limit How many items to return at one time (max 100)
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PatchPetsPetIDJSONBody defines parameters for PatchPetsPetID.
type PatchPetsPetIDJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// PatchPetsPetIDJSONRequestBody defines body for PatchPetsPetID for application/json ContentType.
type PatchPetsPetIDJSONRequestBody PatchPetsPetIDJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListPets request
	ListPets(ctx context.Context, params *ListPetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePets request
	CreatePets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPetsPetID request
	GetPetsPetID(ctx context.Context, petID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPetsPetID request with any body
	PatchPetsPetIDWithBody(ctx context.Context, petID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPetsPetID(ctx context.Context, petID string, body PatchPetsPetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListPets(ctx context.Context, params *ListPetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPetsPetID(ctx context.Context, petID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPetsPetIDRequest(c.Server, petID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPetsPetIDWithBody(ctx context.Context, petID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPetsPetIDRequestWithBody(c.Server, petID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPetsPetID(ctx context.Context, petID string, body PatchPetsPetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPetsPetIDRequest(c.Server, petID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListPetsRequest generates requests for ListPets
func NewListPetsRequest(server string, params *ListPetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePetsRequest generates requests for CreatePets
func NewCreatePetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPetsPetIDRequest generates requests for GetPetsPetID
func NewGetPetsPetIDRequest(server string, petID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petID", runtime.ParamLocationPath, petID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPetsPetIDRequest calls the generic PatchPetsPetID builder with application/json body
func NewPatchPetsPetIDRequest(server string, petID string, body PatchPetsPetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPetsPetIDRequestWithBody(server, petID, "application/json", bodyReader)
}

// NewPatchPetsPetIDRequestWithBody generates requests for PatchPetsPetID with any type of body
func NewPatchPetsPetIDRequestWithBody(server string, petID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petID", runtime.ParamLocationPath, petID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListPets request
	ListPetsWithResponse(ctx context.Context, params *ListPetsParams, reqEditors ...RequestEditorFn) (*ListPetsResponse, error)

	// CreatePets request
	CreatePetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePetsResponse, error)

	// GetPetsPetID request
	GetPetsPetIDWithResponse(ctx context.Context, petID string, reqEditors ...RequestEditorFn) (*GetPetsPetIDResponse, error)

	// PatchPetsPetID request with any body
	PatchPetsPetIDWithBodyWithResponse(ctx context.Context, petID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPetsPetIDResponse, error)

	PatchPetsPetIDWithResponse(ctx context.Context, petID string, body PatchPetsPetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPetsPetIDResponse, error)
}

type ListPetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pets
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListPetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreatePetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPetsPetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pet
}

// Status returns HTTPResponse.Status
func (r GetPetsPetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPetsPetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPetsPetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchPetsPetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPetsPetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListPetsWithResponse request returning *ListPetsResponse
func (c *ClientWithResponses) ListPetsWithResponse(ctx context.Context, params *ListPetsParams, reqEditors ...RequestEditorFn) (*ListPetsResponse, error) {
	rsp, err := c.ListPets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPetsResponse(rsp)
}

// CreatePetsWithResponse request returning *CreatePetsResponse
func (c *ClientWithResponses) CreatePetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePetsResponse, error) {
	rsp, err := c.CreatePets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePetsResponse(rsp)
}

// GetPetsPetIDWithResponse request returning *GetPetsPetIDResponse
func (c *ClientWithResponses) GetPetsPetIDWithResponse(ctx context.Context, petID string, reqEditors ...RequestEditorFn) (*GetPetsPetIDResponse, error) {
	rsp, err := c.GetPetsPetID(ctx, petID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPetsPetIDResponse(rsp)
}

// PatchPetsPetIDWithBodyWithResponse request with arbitrary body returning *PatchPetsPetIDResponse
func (c *ClientWithResponses) PatchPetsPetIDWithBodyWithResponse(ctx context.Context, petID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPetsPetIDResponse, error) {
	rsp, err := c.PatchPetsPetIDWithBody(ctx, petID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPetsPetIDResponse(rsp)
}

func (c *ClientWithResponses) PatchPetsPetIDWithResponse(ctx context.Context, petID string, body PatchPetsPetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPetsPetIDResponse, error) {
	rsp, err := c.PatchPetsPetID(ctx, petID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPetsPetIDResponse(rsp)
}

// ParseListPetsResponse parses an HTTP response from a ListPetsWithResponse call
func ParseListPetsResponse(rsp *http.Response) (*ListPetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePetsResponse parses an HTTP response from a CreatePetsWithResponse call
func ParseCreatePetsResponse(rsp *http.Response) (*CreatePetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPetsPetIDResponse parses an HTTP response from a GetPetsPetIDWithResponse call
func ParseGetPetsPetIDResponse(rsp *http.Response) (*GetPetsPetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPetsPetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPetsPetIDResponse parses an HTTP response from a PatchPetsPetIDWithResponse call
func ParsePatchPetsPetIDResponse(rsp *http.Response) (*PatchPetsPetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPetsPetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all pets
	// (GET /pets)
	ListPets(ctx echo.Context, params ListPetsParams) error
	// Create a pet
	// (POST /pets)
	CreatePets(ctx echo.Context) error

	// (GET /pets/{petID})
	GetPetsPetID(ctx echo.Context, petID string) error

	// (PATCH /pets/{petID})
	PatchPetsPetID(ctx echo.Context, petID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListPets converts echo context to params.
func (w *ServerInterfaceWrapper) ListPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPetsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPets(ctx, params)
	return err
}

// CreatePets converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePets(ctx)
	return err
}

// GetPetsPetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPetsPetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petID" -------------
	var petID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "petID", runtime.ParamLocationPath, ctx.Param("petID"), &petID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPetsPetID(ctx, petID)
	return err
}

// PatchPetsPetID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchPetsPetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petID" -------------
	var petID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "petID", runtime.ParamLocationPath, ctx.Param("petID"), &petID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchPetsPetID(ctx, petID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.ListPets)
	router.POST(baseURL+"/pets", wrapper.CreatePets)
	router.GET(baseURL+"/pets/:petID", wrapper.GetPetsPetID)
	router.PATCH(baseURL+"/pets/:petID", wrapper.PatchPetsPetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVzW7bPBB8FWK/79ACSiQnQRvo1qZFa/QvQHsLfGCltURH/Am5cqwaeveCpGzHttKg",
	"QAv0ZJJeLWdmZ5drKLQ0WqEiB/kaXFGj5GH51lpt/cJYbdCSwHBc6BL971xbyQlyEIrOzyAB6gzGLVZo",
	"oU9AonO8CtHDn46sUBX0fQIW71phsYT8Jubcxc+2yfT3BRbkc10jHWMR5SGSFxejSBSXYzASIF49DU+U",
	"MKR4BFkEQyjD4n+Lc8jhv3QnbTromnoaXhm+msbwSZZtc3JreQe9v16oufa5GlGgcgF75ACfpt8CcEGN",
	"336951WFlnkUpK2XcYnWCa0gh8lpdpr5aG1QcSMgh/NwlIDhVAe0qRnwV1Fhry8nodW0hBw+CkeBoP/C",
	"comE1kF+s4YSXWGFoXjTe33PJFcdCyow0switVYxTkwrZCQksmeSr9gky56DJwg53LVou422OTRCCoJk",
	"MOGoySRfCdnKfd22he5nvnDOaOWiQc6yLHpWEapAjxvTiCIQTBfOY18/uO+J0rlYnH3qr5jhFZYsVI/p",
	"OTNRrxp5GcRaw+pE4Spcf/hpI9StV4tqZD4m5PJJdjQe6nHo04hmztuG/hjP2PcjRFuFK4MFYclwiEnA",
	"tVJy2w1WYbxpNvyJV94pELazPgGj3YjDrixywsFjB8WbHEv2uW2arTjwD9GPPBj39I/Z90lstHRtkKZv",
	"+kcb7h2Gfrv2UfB33TxG8suHQOu4dvvNH7rXj5Bd85ot4s3gJNvir8w7C1OoqI9FuPbH+zLctejotS67",
	"31Jg/7l45BXoj4Z6H1+APekvRryo2dWAZES0YA+0y41mrW0gh5rI5Gk6OXvpB/HpJL/MLrN0OQEvx+rE",
	"kTaNqGraPG/Q6R+yXor29mKxuIW+/xkAAP//gKU/orIHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
